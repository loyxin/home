# var
TEST=TEMP
TEMP="test"
echo ${!TEST} # test echo $TEST # TEMP
``：命令替换
""：弱引用，可以实现变量和命令的替换。
'': 强引用，不完成变量替换
x=*
echo $x # all
echo "$x" # *
echo '$x' # $x
command > file	将输出重定向到 file。
command < file	将输入重定向到 file。
command >> file	将输出以追加的方式重定向到 file。
n > file	将文件描述符为 n 的文件重定向到 file。
n >> file	将文件描述符为 n 的文件以追加的方式重定向到 file。
n >& m	将输出文件 m 和 n 合并。
n <& m	将输入文件 m 和 n 合并。
<< tag	将开始标记 tag 和结束标记 tag 之间的内容作为输入。
需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。

# To implement a for loop:
for file in *;
do
    echo $file found;
done

for var in $list ## for(auto i in list)
for var in "$list" # 解析为字符串

echo a{b, c, d}e # abe, ace, ade
echo {0..10}
# To implement a case command:
case "$1"
in
    0) echo "zero found";;
    1) echo "one found";;
    2) echo "two found";;
    3*) echo "something beginning with 3 found";;
esac

使用 ^ 删除多余部分
^old^new
全部替换 !:gs/old/new
使用 !foo 执行以 foo 开头的命令 （!?foo 执行包含 foo 的命令）

# Turn on debugging:
set -x
# set 设置一些bash的选项
# Turn off debugging:
set +x

# Retrieve N-th piped command exit status
printf 'foo' | fgrep 'foo' | sed 's/foo/bar/'
echo ${PIPESTATUS[0]}  # replace 0 with N

# Lock file:
( set -o noclobber; echo > my.lock ) || echo 'Failed to create lock file'

# input
read name
echo "hello $name."

Weak: uses double quotes: " # expand your argument
Strong: uses single quotes:' # not expand

$# 参数个数
$0 当前脚本的文件名
$* 传递给脚本或函数的所有参数
$@ 传递给脚本或函数的所有参数
但是当它们被双引号(" ")包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。

$$ 当前Shell进程的ID
$? 上个命令的退出状态

 case $变量名 in
模式1）
命令序列1
;;
模式2）
命令序列2
;;
*）
默认执行的命令序列     ;;
esac

 case $1 in
         start | begin)
           echo "start something"
         ;;
         stop | end)
           echo "stop something"
         ;;
         *)
           echo "Ignorant"
         ;;
 esac

-e"$file"Returns true if the file exists.
-d"$file"Returns true if the file exists and is a directory
-f"$file"Returns true if the file exists and is a regular file
-h"$file"Returns true if the file exists and is a symbolic link

>> Append
1> standard output
2> std err

&>  STDOUT and STDERR to     or
echo 'hello' > /dev/null 2>&1

name pipe
mkfifo myPipe
ls -l > myPipe
grep ".log" < myPipe

cd my_directory &&ls||echo"No such directory"
If the cd fails, the &&ls is skipped and the ||echo ... is executed.

for default arguments use ${1:-default_val}
foo(){
	local val=${1:-25}
	echo "$val"
}
to require an argument use ${var:?error message}

单引号变量var='test' ，只能原样输出，变量无效
双引号变量var="my name is ${name}"，变量有效 可出现转义符
`` 执行命令
echo ${#var} 加#获取长度 输出为4
提取子字符串
1:4 从第2个开始 往后截取4个字符
::4 从第一个字符开始 往后截取4个字符
echo ${name:1:4} echo ${name::4}

数组
array_name=(li wang xiang zhang) （小括号做边界、使用空格分离）
array_name[0] li
1 wang
2 xiang
3 zhang

$0
$1 - $n

$$ 脚本运行的当前进程号
$!

${#pattern}
pattern 多长
> 重新写
>> append
< read
<< [-] marker
- 忽略行首的tab

< 只能文件

<<< string

&> 标准输出和标准错误都输入到这个文件
>&
command > /dev/null 2>&1
command 2>&1 > filename

exec 打开文件描述符

exec [n]> filename
exec [n]<> filename

exec [n]<&- 关闭

>&n使用系统调用 dup(2)复制文件描述符 n并把结果用作标准输出；
<&n标准输入复制自文件描述符 n；
n<&-表示将n号输入关闭  
n>&-表示将n 号输出关闭

