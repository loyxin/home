# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


priority -40
extends c

snippet jt1 "job option test without value" b
void JobOptionTest_femplus::check_$1($2 expt = $0)
{
    // old code
    const char* $1_char_old = d_app->GetOption("$1");
	$2 $1_old;
	if ($1_char_old) {
		$1_old = $4($1_char_old);
	}

	// new code
    $2 $1_new;
    bool set_$1 = d_app->GetJobOption("$1", $1_new);

    log_printf(LOG_DEBUG_FEM, "$1_old=$3, $1_new=$3.\n", $1_old, $1_new);
    if (set_$1) {
        EXPECT_EQ($5);
        EXPECT_EQ($5);
    } else {
        EXPECT_EQ($6);
    }
}

TEST_F(JobOptionTest_femplus, $1)
{
    // case 1
    check_$1();
    // case 2
    d_app->AddOption("$1", "$7");
    check_$1("$7");
    d_app->DeleteOptions("$1");
}
endsnippet

snippet jt2 "job option test with default value " b
void JobOptionTest_femplus::check_$1($2 expt = $3)
{
    // old code
    $2 $1_old = d_app->GetOption("$1", $3);

	// new code
    $2 $1_new = d_app->GetJobOption<$2>("$1");

    log_printf(LOG_DEBUG_FEM, "$1_old=$4, $1_new=$4.\n", $1_old, $1_new);
	EXPECT_EQ($1_old, expt);
	EXPECT_EQ($1_new, expt);
}

TEST_F(JobOptionTest_femplus, $1)
{
    // case 1
    check_$1();
    // case 2
    d_app->AddOption("$1", "$5");
    check_$1($5);
    d_app->DeleteOptions("$1");
}
endsnippet

snippet jt3 "job option test with default value " b
void JobOptionTest_femplus::check_$1()
{
    // old code
	$2 $1_temp;
    $2 $1_old = d_app->GetOption("$1", $1_temp);

	// new code
	optreg::Attr attr;
	attr.Set("$1", $1_temp);
    $2 $1_new = d_app->GetJobOption<$2>("$1", attr);

    log_printf(LOG_DEBUG_FEM, "$1_old=$4, $1_new=$4.\n", $1_old, $1_new);
	EXPECT_EQ($1_old, $1_new);
}

TEST_F(JobOptionTest_femplus, $1)
{
    // case 1
    check_$1();
    // case 2
    d_app->AddOption("$1", "$0");
    check_$1();
    d_app->DeleteOptions("$1");
}
endsnippet

snippet opno "op reg no default" b
{
	OptionItem op("$1", FEM_FAMILY, true, "");
	NO_DEFAULT_OPTION_VALUE(op, $2);
	RegisterOption(op);
}
endsnippet
snippet op "op reg" b
{
	OptionItem op("$1", FEM_FAMILY, true, "");
	op.defaultValue = $2;
	RegisterOption(op);
}
$0
endsnippet

snippet header "add guard hear" b
#ifndef $1
#define $1
$0
#endif  // $1
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet cl "class .. (class)"
class ${1}
{
public:
	${1} (${2:arguments});
	~${1} ();

private:
	${0:/* data */}
};
endsnippet

snippet for "for loop (for)"
for (auto ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet
snippet array
	std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
	std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
	std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
endsnippet
## STL smart pointers
# std::shared_ptr
snippet msp
	std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet
snippet amsp
	auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# std::unique_ptr
snippet mup
	std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet
snippet amup
	auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet
snippet pri
	private
endsnippet
# protected
snippet pro
	protected
endsnippet
# public
snippet pub
	public
endsnippet
# namespace
snippet ns
	namespace ${1} {
		${0}
	} // namespace $1
endsnippet
snippet ans
	namespace {
		${0}
	} // namespace
endsnippet
snippet cout
	std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
	std::cin >> ${1};
endsnippet
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
endsnippet

# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	};
endsnippet


# for class move assign
snippet mas "add move assign"
	$1 (const $1&) = $2;
	$1 ($1&&) = $2;
	$1& operator=(const $1&) = $2;
	void operator=($1&&) = $2;
	$0
endsnippet
